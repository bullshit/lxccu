#!/bin/sh
# postinst script for test
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /var/lib/lxccu/source/lxccuhelper



UPGRADE=0

lastoctet_macaddress=""
bridgename=""

case "$1" in
    configure)
		LXCCU_VERSION=$(zcat /usr/share/doc/$DPKG_MAINTSCRIPT_PACKAGE/changelog*gz | \
  head -1 | perl -ne '$_=~ /.*\((.*)\).*/; print $1;')

		if [ -f /opt/lxccu_backup.tar.gz ]; then
			UPGRADE=1
		fi

		remove_lxccu

		logdebug "LXCCU_ROOT" $LXCCU_ROOT
		mkdir -p $LXCCU_ROOT
		logdebug "LXCCU_ROOTFS" $LXCCU_ROOTFS


		# download fw
		EQ3_FW_URL="http://www.eq-3.de/Downloads/Software/HM-CCU2-Firmware_Updates/HM-CCU2-${EQ3_FW_VERSION}/HM-CCU-${EQ3_FW_VERSION}.tar.gz"
		logdebug "EQ3_FW_URL" $EQ3_FW_URL
		EQ3_FW="/opt/HM-CCU2-${EQ3_FW_VERSION}.tar.gz"
		logdebug "EQ3_FW" $EQ3_FW
		echo "Downloading firmware"
		wget "$EQ3_FW_URL" $QUIET --output-document="$EQ3_FW"
		if [ ! -f "$EQ3_FW" ]; then
			echo "Can not download firmware. Are you connected to the internet?"
			exit 1
		fi

		# check md5sum
		echo "${EQ3_FW_MD5SUM}  HM-CCU2-${EQ3_FW_VERSION}.tar.gz" > "/opt/HM-CCU2-${EQ3_FW_VERSION}.md5"
		cd /opt/ && md5sum -c "/opt/HM-CCU2-${EQ3_FW_VERSION}.md5"
		md5Return=$?
		rm "/opt/HM-CCU2-${EQ3_FW_VERSION}.md5"
		if [ $md5Return -eq 1 ]; then
			echo "Download checksum wrong! Please reinstall"
			exit 1
		fi

		# extract fw
		echo "Extracting firmware"
		tar xzf $EQ3_FW -C /opt/


		# extract ubi image
		echo "Extract ubi image"
		LOG=`mktemp`
		/var/lib/ubi_reader/ubi_extract_files.py -q -k -o $LXCCU_ROOT /opt/rootfs.ubi

		# most lxc commands use rootfs folder and not the config option
		ln -s $LXCCU_ROOTFS /var/lib/lxc/lxccu/rootfs

		# clean up download sources
		echo "Remove downloaded files"
		rm -f $EQ3_FW
		rm -f /opt/EULA.de
		rm -f /opt/EULA.en
		rm -f /opt/rootfs.ubi
		rm -f /opt/uImage
		rm -f /opt/update_script


		# patch fw
		cd $LXCCU_ROOTFS 
		echo "apply patch"
		patch $QUIET --input "${ROOT_PATH}source/patches/lxccu-${EQ3_FW_VERSION}.patch" -p1


		# apply scripts
		cd $LXCCU_ROOTFS 
		echo "apply script"
		sh "${ROOT_PATH}source/scripts/lxccu-${EQ3_FW_VERSION}.sh"


		# sdcard
		echo "create sd card"
		if [ -d "/media/sd-lxccu/" ]; then
			echo "sd card exists"
		else
			mkdir -p /media/sd-lxccu/
			touch /media/sd-lxccu/.initialised		
		fi

		if [ $UPGRADE -eq 0 ]; then
			lastoctet_macaddress=`openssl rand -hex 1 | sed 's/\(..\)/\1:/g; s/.$//'`
		else
			restore_lxccu_backup
		fi

		# bridge 
		echo "check bridge"

        bridgename=$(brctl show | awk 'NR % 2 == 0' | awk '{print $1}' | head -n 1)
        if [ -z "$bridgename" ]; then
            bridgename="lxccubr0"
        fi


		# lxc config file
		echo "create lxc config file"
		cat > "${LXCCU_ROOT}config" <<EOF
lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry = sysfs sys sysfs defaults  0 0
lxc.mount.entry = varfs var tmpfs defaults,size=196M 0 0
#lxc.mount.entry = devpts dev/pts devpts nosuid,mode=0620,ptmxmode=000,newinstance 0 0
lxc.mount.entry = devpts dev/pts devpts defaults,newinstance 0 0
lxc.mount.entry = /media/sd-lxccu  media/sd-mmcblk0/ none defaults,bind 0 0

# logging lxc > v 0.8
# lxc.loglevel = 2

#lxc.start.auto = 1

lxc.tty = 1
lxc.pts = 1
lxc.cgroup.devices.allow = a

# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm

# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm

# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

# /dev/pts/* - pts namespaces are "coming soon"
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm

#lxc.cgroup.devices.allow = c 136:* rwm # pts
#lxc.cgroup.devices.allow = c 254:0 rwm # rtc
#lxc.cgroup.devices.allow = c 5:* rwm
#lxc.cgroup.devices.allow = c 4:* rwm # ttyXX
#lxc.cgroup.devices.allow = c 1:* rwm
#lxc.cgroup.devices.allow = b 7:* rwm # loop
#lxc.cgroup.devices.allow = b 1:* rwm # ram

# /dev/net/
lxc.cgroup.devices.allow = c 10:200 rwm

lxc.utsname = lxccu
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = ${bridgename}
lxc.network.hwaddr = 4a:49:43:49:79:${lastoctet_macaddress}
lxc.rootfs = ${LXCCU_ROOTFS}
EOF
		
		# @TODO bugfix 1.4 -> 1.5
		echo "VERSION=${EQ3_FW_VERSION}" > "${LXCCU_ROOTFS}/boot/VERSION"
		#update version number
		echo "VERSION=${LXCCU_VERSION}" > "${LXCCU_ROOTFS}/boot/LXCCUVERSION"

		# addon installation
		echo "addon installation"
		addonPath="/var/lib/lxccu/addons"
		for addonDir in `ls $addonPath`; do
			cd "${addonPath}/$addonDir"
			echo "install '$addonDir' addon"
			./update_script
		done

        # autostart
 		# add container
		echo "start lxc container lxccu"
		if [ ! -f "${LXCCU_ROOT}autostart" ]; then
			touch "${LXCCU_ROOT}autostart"
		fi
		if [ ! -f "${LXCCU_ROOT}config" ]; then
        	ln -s "${LXCCU_ROOT}config" "$LXC_AUTOSTART"
    	fi

        lxc-start -n "$CONTAINER_NAME" -d

       	echo "*********************************************"
       	echo "*"
       	echo "* Thanks ..."
       	echo "*"
       	echo "* Daimler"
       	echo "* baufuzzis"
       	echo "* Michael-Wolfgang N."
       	echo "* Stefan H."
        echo "* >> Peter G. <<"
       	echo "* Markus F."
       	echo "* Michael H."
       	echo "* Ulrich W."
       	echo "* Sixpack"
       	echo "* AndrÃ©"
       	echo "* Pustekuchen"
       	echo "* fisart"
       	echo "* rkhomematic"
       	echo "* rewe0815"
       	echo "* willi5"
       	echo "* Homoran"
       	echo "* Franz Hubert"
       	echo "*"
       	echo "* for your donation!"
       	echo "*"
       	echo "*"
       	echo "* Donation information at http://www.lxccu.com"
       	echo "*"
       	echo "*********************************************"
       	echo ""
       	sleep 3
        echo "using bridge: ${bridgename}"
        echo "mac address: 4a:49:43:49:79:${lastoctet_macaddress}"
        echo ""
        echo "To get information about your lxccu try the 'lxccuinfo' command"
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
		remove_lxccu
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
