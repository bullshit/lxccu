#!/bin/sh
# postinst script for test
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

EQ3_FW_VERSION="2.7.17"
ROOT_PATH="/var/lib/lxccu/"
LXCCU_ROOT="/var/lib/lxc/lxccu/"
LXCCU_ROOTFS="/var/lib/lxc/lxccu/root"
CONTAINER_NAME="lxccu"
logdebug () {
	#echo "Debug: $1 $2"
	return
}
#QUIET=""
QUIET="--quiet"

UPGRADE=0
remove_lxccu () {
	echo "check if container exists"
	CONTAINER_EXITS=$(lxc-list | grep -E "^ {2}lxccu\$" | wc -l)
	if [ $CONTAINER_EXITS -ne 0 ]; then
		echo "upgrade modus"
		UPGRADE=1
		lxc-stop -n "$CONTAINER_NAME"
		lxc-destroy -n "$CONTAINER_NAME"
	fi
	if [ -f /etc/lxc/auto/lxccu ]; then
		unlink /etc/lxc/auto/lxccu
	fi
	if [ -d "$LXCCU_ROOT" ]; then
		rm -rf $LXCCU_ROOT
	fi
}

restore_lxccu_backup () {
	echo "restore"
}


case "$1" in
    configure)
		remove_lxccu

		logdebug "LXCCU_ROOT" $LXCCU_ROOT
		mkdir -p $LXCCU_ROOT
		logdebug "LXCCU_ROOTFS" $LXCCU_ROOTFS


		# download fw
		EQ3_FW_URL="http://www.eq-3.de/Downloads/Software/HM-CCU2-Firmware_Updates/HM-CCU2-${EQ3_FW_VERSION}/HM-CCU2-${EQ3_FW_VERSION}.tar.gz"
		logdebug "EQ3_FW_URL" $EQ3_FW_URL
		EQ3_FW="/opt/HM-CCU2-${EQ3_FW_VERSION}.tar.gz"
		logdebug "EQ3_FW" $EQ3_FW
		echo "Downloading firmware"
		wget "$EQ3_FW_URL" $QUIET --output-document="$EQ3_FW"
		if [ ! -f "$EQ3_FW" ]; then
			echo "Can not download firmware. Are you connected to the internet?"
			exit 1
		fi


		# extract fw
		echo "Extracting firmware"
		tar xzf $EQ3_FW -C /opt/


		# extract ubi image
		echo "Extract ubi image"
		LOG=`mktemp`
		/var/lib/ubi_reader/ubi_extract_files.py -q -k -o $LXCCU_ROOT --log-file $LOG /opt/rootfs.ubi

		# clean up download sources
		echo "Remove downloaded files"
		rm -f $EQ3_FW
		rm -f /opt/EULA.de
		rm -f /opt/EULA.en
		rm -f /opt/rootfs.ubi
		rm -f /opt/uImage
		rm -f /opt/update_script


		# patch fw
		cd $LXCCU_ROOTFS 
		echo "apply patch"
		patch $QUIET --input "${ROOT_PATH}source/patches/lxccu-${EQ3_FW_VERSION}.patch" -p1


		# apply scripts
		cd $LXCCU_ROOTFS 
		echo "apply script"
		sh "${ROOT_PATH}source/scripts/lxccu-${EQ3_FW_VERSION}.sh"


		# sdcard
		echo "create sd card"
		if [ -d "/media/sd-lxccu/" ]; then
			echo "sd card exists"
		else
			mkdir -p /media/sd-lxccu/
			touch /media/sd-lxccu/.initialised		
		fi

		lastoctet_macaddress=`openssl rand -hex 1 | sed 's/\(..\)/\1:/g; s/.$//'`
		# lxc config file
		echo "create lxc config file"
		cat > "${LXCCU_ROOT}config" <<EOF
lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry = sysfs sys sysfs defaults  0 0
lxc.mount.entry = varfs var tmpfs defaults,size=196M 0 0
#lxc.mount.entry = devpts dev/pts devpts nosuid,mode=0620,ptmxmode=000,newinstance 0 0
lxc.mount.entry = devpts dev/pts devpts defaults,newinstance 0 0
lxc.mount.entry = /media/sd-lxccu  media/sd-mmcblk0/ none defaults,bind 0 0

lxc.tty = 1
lxc.pts = 1
lxc.cgroup.devices.deny = a

# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm

# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm

# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

# /dev/pts/* - pts namespaces are "coming soon"
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm

#lxc.cgroup.devices.allow = c 136:* rwm # pts
#lxc.cgroup.devices.allow = c 254:0 rwm # rtc
#lxc.cgroup.devices.allow = c 5:* rwm
#lxc.cgroup.devices.allow = c 4:* rwm # ttyXX
#lxc.cgroup.devices.allow = c 1:* rwm
#lxc.cgroup.devices.allow = b 7:* rwm # loop
#lxc.cgroup.devices.allow = b 1:* rwm # ram

lxc.utsname = lxccu
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = lxccubr0
lxc.network.hwaddr = 4a:49:43:49:79:${lastoctet_macaddress}
lxc.rootfs = ${LXCCU_ROOT}root
EOF
		
        # autostart


        restore_lxccu_backup

 		# add container
		echo "create lxc container lxccu"
		touch "${LXCCU_ROOT}autostart"
        ln -s "${LXCCU_ROOT}config" /etc/lxc/auto/lxccu
		#lxc-create -n "$CONTAINER_NAME" -f "${LXCCU_ROOT}config"
		#retval=$?

		# if [ $retval -ne 0 ]; then
		# 	lxc-create -n lxccu -f "/var/lib/lxc/lxccu/config" -t none
		# fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
		remove_lxccu
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
