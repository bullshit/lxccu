#!/bin/sh
# postinst script for test
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

LXCCU_FW_VERSION="2.7.17"
ROOT_PATH="/var/lib/lxccu/"

case "$1" in
    configure)
		# download fw
		EQ3_FW_URL="http://www.eq-3.de/Downloads/Software/HM-CCU2-Firmware_Updates/HM-CCU2-${LXCCU_FW_VERSION}/HM-CCU2-${LXCCU_FW_VERSION}.tar.gz"
		LXCCU_FW="/opt/HM-CCU2-${LXCCU_FW_VERSION}.tar.gz"
		echo "Downloading firmware"
		wget "$EQ3_FW_URL" --quiet --output-document="$LXCCU_FW"
		if [ ! -f "$LXCCU_FW" ]; then
			echo "Can not download firmware. Are you connected to the internet?"
			exit 1
		fi


		# extract fw
		LXCCU_FW_ROOTFS="/opt/lxccu/fs/"
		mkdir -p $LXCCU_FW_ROOTFS
		echo "Extracting firmware"
		tar xzf $LXCCU_FW -C /opt/


		# extract ubi image
		echo "Extract ubi image"
		/var/lib/lxccu/ubi_reader/ubi_extract_files.py -q -k -l $LXCCU_FW_ROOTFS /opt/rootfs.ubi

		# clean up download sources
		echo "Remove downloaded files"
		rm -f $LXCCU_FW
		rm -f /opt/EULA.de
		rm -f /opt/EULA.en
		rm -f /opt/rootfs.ubi
		rm -f /opt/uImage
		rm -f /opt/update_script


		# patch fw
		cd $LXCCU_FW_ROOTFS 
		echo "apply patch"
		patch --quiet --input "${ROOT_PATH}source/patches/lxccu-${LXCCU_FW_VERSION}.patch" -p1


		# apply scripts
		cd $LXCCU_FW_ROOTFS 
		echo "apply script"
		sh "${ROOT_PATH}source/scripts/lxccu-${LXCCU_FW_VERSION}.sh"


		# sdcard
		echo "create sd card"
		mkdir -p /media/sd-lxccu/
		touch /media/sd-lxccu/.initialised


		# prepare configure file
		#TEMP$(<${ROOT_PATH}source/lxc-config/config-${LXCCU_FW_VERSION})
		echo "select bridge"
		# dialog --backtitle "$BACKTITLE" \
		# 	--title $CONFIG_TITLE \
		# 	--radiolist "Select a network bridge:" 10 40 4 \
		# 		`ip -o link | grep -v "lo" | awk '{split($0,a,":"); nic=a[2]; gsub(" ","",nic); s="off"; if (FNR==1) s="on"; print FNR" "nic" "s}'` 2>$OUTPUT
		# response=$?
		# case $response in
		# 	0)
		# 		#echo "select input: $INPUT"
		# 		BRIDGE_DEVICE=`ip -o link | grep -v "lo" | head -n $INPUT | tail -n 1 | awk '{split($0,a," "); nic=a[2]; print substr(nic,0,length(nic));}'`
		# 		;;
		# 	*)
		# 		exit 1
		# esac
		BRIDGE_DEVICE="br0"
		echo "create lxc config file"
		TEMP= <<EOF
lxc.mount.entry = proc proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry = sysfs sys sysfs defaults  0 0
lxc.mount.entry = varfs var tmpfs defaults,size=196M 0 0
#lxc.mount.entry = devpts dev/pts devpts nosuid,mode=0620,ptmxmode=000,newinstance 0 0
lxc.mount.entry = devpts dev/pts devpts defaults,newinstance 0 0
lxc.mount.entry = /media/sd-lxccu  media/sd-mmcblk0/ none defaults,bind 0 0

lxc.tty = 1
lxc.pts = 1
lxc.cgroup.devices.deny = a

# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm

# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm

# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

# /dev/pts/* - pts namespaces are "coming soon"
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm

#lxc.cgroup.devices.allow = c 136:* rwm # pts
#lxc.cgroup.devices.allow = c 254:0 rwm # rtc
#lxc.cgroup.devices.allow = c 5:* rwm
#lxc.cgroup.devices.allow = c 4:* rwm # ttyXX
#lxc.cgroup.devices.allow = c 1:* rwm
#lxc.cgroup.devices.allow = b 7:* rwm # loop
#lxc.cgroup.devices.allow = b 1:* rwm # ram

lxc.utsname = lxccu
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = $BRIDGE_DEVICE
lxc.network.hwaddr = 4a:49:43:49:79:bf
lxc.rootfs = $LXCCU_FW_ROOTFS
EOF
		echo "$TEMP" > "/opt/lxccu/config"

		
		# add container
		echo "create lxc container lxccu"
		lxc-create -n lxccu -f "/opt/lxccu/config"
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
